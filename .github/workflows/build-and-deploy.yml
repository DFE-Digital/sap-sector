name: Build and Deploy
concurrency: build_and_deploy_${{ github.ref_name }}

on:
  workflow_dispatch:
    inputs:
      environment:
        description: "Deploy environment"
        required: true
        type: choice
        default: review
        options:
        - review
        - test
        - production
      docker-image-tag:
        description: "Docker image tag to deploy (optional)"
        required: true
        type: string
      pull-request-number:
        description: "Pull request number (required for review environment)"
        required: false
        type: string
  push:
   branches:
    - main
  pull_request:
    branches:
    - main
    types: [opened, reopened, synchronize, labeled]

env:
  TERRAFORM_BASE: terraform/application
  HEALTHCHECK_CMD: 'healthcheck'

jobs:
  build:
    name: Build
    if: ${{ github.event_name != 'workflow_dispatch' }}
    env:
      DOCKER_REPOSITORY: ghcr.io/dfe-digital/sap-sector
    outputs:
      docker-image-tag: ${{ steps.build-image.outputs.tag }}
    permissions:
      packages: write
      pull-requests: write
    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v4
      name: Checkout

    - name: Build and push docker image
      id: build-image
      uses: DFE-Digital/github-actions/build-docker-image@master
      with:
        github-token: ${{ secrets.GITHUB_TOKEN }}
        context: .
        docker-repository: ${{ env.DOCKER_REPOSITORY }}
        max-cache: true
        reuse-cache: true
        snyk-token: ${{ secrets.SNYK_TOKEN }}

  test:
    name: Run Unit & Integration Tests with Coverage
    if: ${{ github.event_name != 'workflow_dispatch' }}
    runs-on: ubuntu-latest

    steps:
    - name: Check out repository
      uses: actions/checkout@v4

    - name: Set up .NET
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: 8.0.x

    - name: Restore dependencies
      run: dotnet restore

    - name: Build solution
      run: dotnet build --configuration Release --no-restore

    - name: Install Playwright browsers
      working-directory: SAPSec.Tests.UI
      run: pwsh bin/Debug/net8.0/playwright.ps1 install

    - name: Run Unit Tests
      run: |
          dotnet test SAPSec.Tests.Unit/SAPSec.Tests.Unit.csproj \
            --collect:"XPlat Code Coverage" \
            --settings coverlet.runsettings \
            --results-directory ./TestResults/unit

    - name: Run Integration Tests
      run: |
          dotnet test SAPSec.Tests.Integration/SAPSec.Tests.Integration.csproj \
            --collect:"XPlat Code Coverage" \
            --settings coverlet.runsettings \
            --results-directory ./TestResults/integration

    - name: Run UI Tests
      run: |
          dotnet test SAPSec.Tests.UI/SAPSec.Tests.UI.csproj \
            --collect:"XPlat Code Coverage" \
            --settings coverlet.runsettings \
            --results-directory ./TestResults/ui

    - name: Generate Combined Coverage Report
      uses: danielpalme/ReportGenerator-GitHub-Action@5.3.11
      with:
        reports: './SAPSec.Tests.Unit/coverage.cobertura.xml;./SAPSec.Tests.Integration/coverage.cobertura.xml'
        targetdir: 'TestCoverageReport'
        reporttypes: 'HtmlSummary;Html;Badges'
        classfilters: '-AspNetCoreGeneratedDocument*;-AspNetCore.Views*'

    - name: Upload Coverage Report
      uses: actions/upload-artifact@v4
      with:
          name: code-coverage-report
          path: TestCoverageReport

  deploy-review-app:
    name: Deployment To Review
    concurrency: deploy_review_${{ github.event.pull_request.number }}
    if: ${{ github.event_name == 'pull_request' && contains(github.event.pull_request.labels.*.name, 'deploy') }}
    needs: [build]
    environment:
      name: review
      url: ${{ steps.deploy_review.outputs.environment_url }}
    runs-on: ubuntu-latest
    permissions:
      id-token: write
      pull-requests: write

    steps:
    - name: Deploy App to Review
      id: deploy_review
      uses: DFE-Digital/github-actions/deploy-to-aks@master
      with:
        azure-client-id: ${{ secrets.AZURE_CLIENT_ID }}
        azure-subscription-id: ${{ secrets.AZURE_SUBSCRIPTION_ID }}
        azure-tenant-id: ${{ secrets.AZURE_TENANT_ID }}
        environment: review
        pr-number: ${{ github.event.pull_request.number }}
        sha: ${{ needs.build.outputs.docker-image-tag }}
        terraform-base: ${{ env.TERRAFORM_BASE }}
        healthcheck: ${{ env.HEALTHCHECK_CMD }}
        db-seed: false
        smoke-test: false
#        gcp-wip: ${{ vars.GCP_WIP }}
#        gcp-project-id: ${{ vars.GCP_PROJECT_ID }}

  deploy:
    name: Deploy environments
    if: ${{ github.ref == 'refs/heads/main' && github.event_name == 'push' }}
    environment:
      name: ${{ matrix.environment }}
      url: ${{ steps.deploy_app.outputs.environment_url }}
    needs: [build, test]
    runs-on: ubuntu-latest
    permissions:
      id-token: write
      pull-requests: write
    strategy:
      max-parallel: 1
      matrix:
        environment: [test, production]

    steps:
    - name: Deploy app to ${{ matrix.environment }}
      id: deploy_app
      uses: DFE-Digital/github-actions/deploy-to-aks@master
      with:
        azure-client-id: ${{ secrets.AZURE_CLIENT_ID }}
        azure-subscription-id: ${{ secrets.AZURE_SUBSCRIPTION_ID }}
        azure-tenant-id: ${{ secrets.AZURE_TENANT_ID }}
        environment: ${{ matrix.environment }}
        sha: ${{ needs.build.outputs.docker-image-tag }}
        terraform-base: ${{ env.TERRAFORM_BASE }}
        healthcheck: ${{ env.HEALTHCHECK_CMD }}
        slack-webhook: ${{ secrets.SLACK_WEBHOOK }}
        smoke-test: false
#        gcp-wip: ${{ vars.GCP_WIP }}
#        gcp-project-id: ${{ vars.GCP_PROJECT_ID }}


  manual_deploy:
    name: Manual deploy
    if: ${{ github.event_name == 'workflow_dispatch' }}
    environment:
      name: ${{ inputs.environment }}
      url: ${{ steps.deploy_manual.outputs.environment_url }}
    runs-on: ubuntu-latest
    permissions:
      id-token: write
      pull-requests: write

    steps:
    - name: Deploy app to ${{ inputs.environment }}
      id: deploy_manual
      uses: DFE-Digital/github-actions/deploy-to-aks@master
      with:
        azure-client-id: ${{ secrets.AZURE_CLIENT_ID }}
        azure-subscription-id: ${{ secrets.AZURE_SUBSCRIPTION_ID }}
        azure-tenant-id: ${{ secrets.AZURE_TENANT_ID }}
        environment: ${{ inputs.environment }}
        pr-number: ${{ inputs.pull-request-number }}
        sha: ${{ inputs.docker-image-tag }}
        terraform-base: ${{ env.TERRAFORM_BASE }}
        healthcheck: ${{ env.HEALTHCHECK_CMD }}
        slack-webhook: ${{ secrets.SLACK_WEBHOOK }}
        smoke-test: false
#        db-seed: ${{ inputs.environment == 'review' && 'true' || 'false' }}
#        gcp-wip: ${{ vars.GCP_WIP }}
#        gcp-project-id: ${{ vars.GCP_PROJECT_ID }}
#
#  deploy_domains_infra:
#    name: Deploy Domains Infrastructure
#    runs-on: ubuntu-latest
#    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
#    concurrency: deploy_domains_infra
#    needs: [deploy]
#    environment:
#      name: production
#    permissions:
#      id-token: write
#
#    steps:
#    - name: Deploy Domains Infrastructure
#      uses: DFE-Digital/github-actions/deploy-domains-infra@master
#      with:
#        azure-client-id:  ${{ secrets.AZURE_CLIENT_ID  }}
#        azure-tenant-id:  ${{ secrets.AZURE_TENANT_ID   }}
#        azure-subscription-id:  ${{ secrets.AZURE_SUBSCRIPTION_ID   }}
#        slack-webhook: ${{ secrets.SLACK_WEBHOOK }}
#
#  deploy_domains_env:
#    name: Deploy Domains to ${{ matrix.domain_environment }} environment
#    runs-on: ubuntu-latest
#    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
#    concurrency: deploy_domains_${{ matrix.domain_environment }}
#    needs: [deploy_domains_infra]
#    strategy:
#      max-parallel: 1
#      matrix:
#        domain_environment: [development, production]
#    environment:
#      name: production
#    permissions:
#      id-token: write
#
#    steps:
#    - name: Deploy Domains Environment
#      uses: DFE-Digital/github-actions/deploy-domains-env@master
#      with:
#        azure-client-id:  ${{ secrets.AZURE_CLIENT_ID  }}
#        azure-tenant-id:  ${{ secrets.AZURE_TENANT_ID   }}
#        azure-subscription-id:  ${{ secrets.AZURE_SUBSCRIPTION_ID   }}
#        environment: ${{ matrix.domain_environment }}
#        healthcheck: healthcheck
#        slack-webhook: ${{ secrets.SLACK_WEBHOOK }}
